<template>
  <div>

  </div>
</template>


<script>

import { THREE,Editor,Viewport,Toolbar,Player,Sidebar,Menubar,Resizer} from '../main.js'
import Blockly from "blockly" 

Number.prototype.format = function () {
	return this.toString().replace( /(\d)(?=(\d{3})+(?!\d))/g, "$1," );

};


export default {
  name: 'Editor',
  data(){
      return{
          workspace: null,
          editor:null,
          viewport:null,
          toolbar:null,
          sidebar:null,
          menubar:null,
          resizer:null,
          isLoadingFromHash: false,
          hash:null,
          

      }
  },

  created(){


    window.URL = window.URL || window.webkitURL;
    window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;
    
    

    this.editor = new Editor();
    window.editor = this.editor; // Expose editor to Console
<<<<<<< HEAD
    window.THREE = THREE; // Expose THREE to APP Scripts and Console
=======
	window.THREE = THREE; // Expose THREE to APP Scripts and Console


>>>>>>> front_v1.1
    
    this.viewport = new Viewport( this.editor );
    document.body.appendChild( this.viewport.dom );

	this.toolbar = new Toolbar( this.editor );
    document.body.appendChild( this.toolbar.dom );
      

	this.sidebar = new Sidebar( this.editor );
	document.body.appendChild( this.sidebar.dom );

	this.menubar = new Menubar( this.editor );
	document.body.appendChild( this.menubar.dom );

    this.resizer = new Resizer( this.editor );
    document.body.appendChild( this.resizer.dom );

    this.editor.storage.init( function () {

		editor.storage.get( function ( state ) {
            if ( isLoadingFromHash ) 
                return;
            
			if ( state !== undefined ) {
				editor.fromJSON( state );
			}
            var selected = editor.config.getKey( 'selected' );

			if ( selected !== undefined ) {
				editor.selectByUuid( selected );
			}
		});
		//
		var timeout;

		function saveState() {

            console.log(editor.history)

					if ( editor.config.getKey( 'autosave' ) === false ) {
						return;
					}
					clearTimeout( timeout );
					timeout = setTimeout( function () {
						editor.signals.savingStarted.dispatch();
						timeout = setTimeout( function () {
							editor.storage.set( editor.toJSON() );
							editor.signals.savingFinished.dispatch();
						}, 100 );
					}, 1000 );

		}

		var signals = editor.signals;

		signals.geometryChanged.add( saveState );
		signals.objectAdded.add( saveState );
		signals.objectChanged.add( saveState );
		signals.objectRemoved.add( saveState );
		signals.materialChanged.add( saveState );
		signals.sceneBackgroundChanged.add( saveState );
		signals.sceneFogChanged.add( saveState );
		signals.sceneGraphChanged.add( saveState );
		signals.scriptChanged.add( saveState );
		signals.historyChanged.add( saveState );
	} );
    
    document.addEventListener( 'dragover', function ( event ) {
		event.preventDefault();
		event.dataTransfer.dropEffect = 'copy';
	}, false );

	document.addEventListener( 'drop', function ( event ) {
		event.preventDefault();
        if ( event.dataTransfer.types[ 0 ] === 'text/plain' ) 
            return; // Outliner drop

		if ( event.dataTransfer.items ) {
					// DataTransferItemList supports folders
			this.editor.loader.loadItemList( event.dataTransfer.items );
		} else {
			this.editor.loader.loadFiles( event.dataTransfer.files );
        }   
	}, false );


	window.addEventListener( 'resize', this.onWindowResize, false );

    this.onWindowResize();
            
    var isLoadingFromHash = false;
	this.hash = window.location.hash;

	if ( this.hash.substr( 1, 5 ) === 'file=' ) {

		var file = hash.substr( 6 );

		if ( confirm( 'Any unsaved data will be lost. Are you sure?' ) ) {

			var loader = new THREE.FileLoader();
			loader.crossOrigin = '';
			loader.load( file, function ( text ) {
				editor.clear();
				editor.fromJSON( JSON.parse( text ) );
			} );

			this.isLoadingFromHash = true;

		}
<<<<<<< HEAD
    }  
=======
	}  */
		await this.LoadSceneFromBack();
		
>>>>>>> front_v1.1
  },

  destroyed(){
    location.reload()
  },

  methods:{

<<<<<<< HEAD
      onWindowResize(){
          this.editor.signals.windowResize.dispatch();
      }
=======
	onWindowResize()
	{
        this.editor.signals.windowResize.dispatch();
	},
	
	async LoadSceneFromBack()
	{
		var port = 'http://localhost:5555'
      	//var config ={headers:{ Authorization :"Bearer "+ this.state.AllAboutToken.accessToken}}
      	/*const data={
        'itemId':item.id,
        'star':item.top,
        'userId':this.state.user.sub}*/
      	await axios.get(port +'/api/test').then(response =>{
			console.log(response)
			this.editor.idFromBack = response.data.id;
			this.editor.loader.MyLoader(response.data.scene);

			this.editor.select( null );
        })
	},

	/*GetModificationsFromHistory()
	{
		//console.log(this.editor.history)

	}*/

	   

	
	
	  
>>>>>>> front_v1.1

  }

}
</script>
